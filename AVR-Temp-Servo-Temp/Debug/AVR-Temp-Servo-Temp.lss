
AVR-Temp-Servo-Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000022e2  00002376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000aa  008000aa  000023c0  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a0c  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a63f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <main>
      8a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ea       	ldi	r26, 0xA2	; 162
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ea       	ldi	r24, 0xA2	; 162
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
}
#endif
/*****************************************************************************************/

void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG ->ADLAR_BITS = TYPE_DATA ;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 83       	st	Z, r24

	ADMUX_REG ->REFS_BITS  = REF_VOLT  ;
     b58:	e7 e2       	ldi	r30, 0x27	; 39
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8f 73       	andi	r24, 0x3F	; 63
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	80 83       	st	Z, r24

	ADCSRA_REG->ADPS_BITS = PRSCALLER ;
     b64:	e6 e2       	ldi	r30, 0x26	; 38
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 7f       	andi	r24, 0xF8	; 248
     b6c:	86 60       	ori	r24, 0x06	; 6
     b6e:	80 83       	st	Z, r24

	ADCSRA_REG->ADEN_BITS = EN        ;
     b70:	e6 e2       	ldi	r30, 0x26	; 38
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	80 83       	st	Z, r24

#if ISR == ISR_EN
	ADCSRA_REG->ADIE_BITS = EN        ;
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	80 83       	st	Z, r24
#ifdef TRIGGER_ENABEL
	ADCSRA_REG->ADATE =EN ;
	SFIOR_REG->SFIOR_ADTS = TRIGGER_SOURCE;
#endif

}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <ADC_voidChannelSellect>:

/*****************************************************************************************/

/* Sellect one ADC Channel to work */
ACD_ERROR_RETURN ADC_voidChannelSellect(ACD_CHANNEL_NUM copy_u8ChannelSellect )
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <ADC_voidChannelSellect+0x6>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	89 83       	std	Y+1, r24	; 0x01
	if( ( copy_u8ChannelSellect<=7 )   )
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	58 f4       	brcc	.+22     	; 0xbb6 <ADC_voidChannelSellect+0x2c>
	{


		ADMUX_REG->MUX_BITS = copy_u8ChannelSellect ;
     ba0:	e7 e2       	ldi	r30, 0x27	; 39
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	8f 71       	andi	r24, 0x1F	; 31
     ba8:	98 2f       	mov	r25, r24
     baa:	9f 71       	andi	r25, 0x1F	; 31
     bac:	80 81       	ld	r24, Z
     bae:	80 7e       	andi	r24, 0xE0	; 224
     bb0:	89 2b       	or	r24, r25
     bb2:	80 83       	st	Z, r24
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <ADC_voidChannelSellect+0x30>
	}
	else
	{
		local_error =NUM_OUT_OF_RANGE ;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error ;
     bba:	89 81       	ldd	r24, Y+1	; 0x01

}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <ADC_StartConversionBoling>:

/*****************************************************************************************/

/* Start Conversion on ADC Channel  Sellected */
ACD_ERROR_RETURN ADC_StartConversionBoling(u16 *copy_Pu8Data)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	27 97       	sbiw	r28, 0x07	; 7
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	9f 83       	std	Y+7, r25	; 0x07
     bdc:	8e 83       	std	Y+6, r24	; 0x06
	u32 counter =0 ;
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	1b 82       	std	Y+3, r1	; 0x03
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1d 82       	std	Y+5, r1	; 0x05
	ACD_ERROR_RETURN local_error =OK ;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Pu8Data != NULL)
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	9f 81       	ldd	r25, Y+7	; 0x07
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	d1 f1       	breq	.+116    	; 0xc66 <ADC_StartConversionBoling+0xa0>
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC_BITS = 1 ;
     bf2:	e6 e2       	ldi	r30, 0x26	; 38
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	80 83       	st	Z, r24
     bfc:	0b c0       	rjmp	.+22     	; 0xc14 <ADC_StartConversionBoling+0x4e>
		// wait for flag
		while ( (ADCSRA_REG->ADIF_BITS ==0) &&counter<=TIME_OUT )
		{
			counter ++ ;
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	ac 81       	ldd	r26, Y+4	; 0x04
     c04:	bd 81       	ldd	r27, Y+5	; 0x05
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	a1 1d       	adc	r26, r1
     c0a:	b1 1d       	adc	r27, r1
     c0c:	8a 83       	std	Y+2, r24	; 0x02
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	ac 83       	std	Y+4, r26	; 0x04
     c12:	bd 83       	std	Y+5, r27	; 0x05
	if(copy_Pu8Data != NULL)
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC_BITS = 1 ;
		// wait for flag
		while ( (ADCSRA_REG->ADIF_BITS ==0) &&counter<=TIME_OUT )
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 71       	andi	r24, 0x10	; 16
     c1c:	88 23       	and	r24, r24
     c1e:	61 f4       	brne	.+24     	; 0xc38 <ADC_StartConversionBoling+0x72>
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	9b 81       	ldd	r25, Y+3	; 0x03
     c24:	ac 81       	ldd	r26, Y+4	; 0x04
     c26:	bd 81       	ldd	r27, Y+5	; 0x05
     c28:	81 3a       	cpi	r24, 0xA1	; 161
     c2a:	26 e8       	ldi	r18, 0x86	; 134
     c2c:	92 07       	cpc	r25, r18
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	a2 07       	cpc	r26, r18
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	b2 07       	cpc	r27, r18
     c36:	18 f3       	brcs	.-58     	; 0xbfe <ADC_StartConversionBoling+0x38>
		{
			counter ++ ;
		}
		if((ADCSRA_REG->ADIF_BITS) ==1 )
     c38:	e6 e2       	ldi	r30, 0x26	; 38
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 71       	andi	r24, 0x10	; 16
     c40:	88 23       	and	r24, r24
     c42:	71 f0       	breq	.+28     	; 0xc60 <ADC_StartConversionBoling+0x9a>
		{
			// Clear flag
			ADCSRA_REG->ADIF_BITS = 1 ;
     c44:	e6 e2       	ldi	r30, 0x26	; 38
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 61       	ori	r24, 0x10	; 16
     c4c:	80 83       	st	Z, r24

        #if TYPE_DATA ==RIGHT_DATA
			//store data from REG ( ADC_DATA )  to copy_Pu8Data
			(*copy_Pu8Data) = ADC_REG    ;
     c4e:	e4 e2       	ldi	r30, 0x24	; 36
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	ee 81       	ldd	r30, Y+6	; 0x06
     c58:	ff 81       	ldd	r31, Y+7	; 0x07
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <ADC_StartConversionBoling+0xa2>
       #endif
		}

		else
		{
			local_error=TIME_OUT_ERROR ;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <ADC_StartConversionBoling+0xa2>

	}

	else
	{
		local_error=NULL_ERROR ;
     c66:	19 82       	std	Y+1, r1	; 0x01
	}
	return  local_error ;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6a:	27 96       	adiw	r28, 0x07	; 7
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <ADC_StartConversion>:
/*****************************************************************************************/
void ADC_StartConversion(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	// Start Conversion --- bit H
	ADCSRA_REG->ADSC_BITS = 1 ;
     c84:	e6 e2       	ldi	r30, 0x26	; 38
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	80 83       	st	Z, r24
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <ADC_voidChannelMulBoling>:



/* Read all   ADC Channel and store it in array */
ACD_ERROR_RETURN ADC_voidChannelMulBoling(u16 *copy_Pu8Data)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <ADC_voidChannelMulBoling+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <ADC_voidChannelMulBoling+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9c 83       	std	Y+4, r25	; 0x04
     ca2:	8b 83       	std	Y+3, r24	; 0x03
	u8 i =4 ;
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	89 83       	std	Y+1, r24	; 0x01
	if(copy_Pu8Data!=NULL)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	c1 f0       	breq	.+48     	; 0xce4 <ADC_voidChannelMulBoling+0x50>
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <ADC_voidChannelMulBoling+0x48>
	{
		while(i!=0)
		{
			i-- ;
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	81 50       	subi	r24, 0x01	; 1
     cba:	8a 83       	std	Y+2, r24	; 0x02
			ADC_voidChannelSellect(i);
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ADC_voidChannelSellect>
			local_error =ADC_StartConversionBoling( (&copy_Pu8Data[i]) ) ;
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9c 01       	movw	r18, r24
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_StartConversionBoling>
     cda:	89 83       	std	Y+1, r24	; 0x01
{
	u8 i =4 ;
	ACD_ERROR_RETURN local_error =OK ;
	if(copy_Pu8Data!=NULL)
	{
		while(i!=0)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	88 23       	and	r24, r24
     ce0:	51 f7       	brne	.-44     	; 0xcb6 <ADC_voidChannelMulBoling+0x22>
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <ADC_voidChannelMulBoling+0x52>
		}

	}
	else
	{
		local_error =NULL_ERROR ;
     ce4:	19 82       	std	Y+1, r1	; 0x01
	}

	return  local_error ;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <ADC_Mapping>:
/*****************************************************************************************/


//0 1023 25 65
u16 ADC_Mapping( u16 x1 ,u16 x2 , u16 y1 ,u16 y2)
{
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	2c 97       	sbiw	r28, 0x0c	; 12
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	78 87       	std	Y+8, r23	; 0x08
     d18:	6f 83       	std	Y+7, r22	; 0x07
     d1a:	5a 87       	std	Y+10, r21	; 0x0a
     d1c:	49 87       	std	Y+9, r20	; 0x09
     d1e:	3c 87       	std	Y+12, r19	; 0x0c
     d20:	2b 87       	std	Y+11, r18	; 0x0b
	u16 data ;
	u16 local_adc_data = 0 ;
     d22:	1a 82       	std	Y+2, r1	; 0x02
     d24:	19 82       	std	Y+1, r1	; 0x01
#if TYPE_DATA ==RIGHT_DATA
	//store data from REG ( ADC_DATA )  to copy_Pu8Data
	local_adc_data = ADC_REG    ;
     d26:	e4 e2       	ldi	r30, 0x24	; 36
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
#elif TYPE_DATA ==LEFT_DATA

	local_adc_data=((u16)ADC_DATA>>6) ;
#endif

	data =( ( (u32)(local_adc_data-x1)*(y2-y1) ) / (x2-x1) ) +y1 ;
     d32:	29 81       	ldd	r18, Y+1	; 0x01
     d34:	3a 81       	ldd	r19, Y+2	; 0x02
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	a9 01       	movw	r20, r18
     d3c:	48 1b       	sub	r20, r24
     d3e:	59 0b       	sbc	r21, r25
     d40:	ca 01       	movw	r24, r20
     d42:	7c 01       	movw	r14, r24
     d44:	00 e0       	ldi	r16, 0x00	; 0
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	2b 85       	ldd	r18, Y+11	; 0x0b
     d4a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	a9 01       	movw	r20, r18
     d52:	48 1b       	sub	r20, r24
     d54:	59 0b       	sbc	r21, r25
     d56:	ca 01       	movw	r24, r20
     d58:	9c 01       	movw	r18, r24
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	c8 01       	movw	r24, r16
     d60:	b7 01       	movw	r22, r14
     d62:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsi3>
     d66:	7b 01       	movw	r14, r22
     d68:	8c 01       	movw	r16, r24
     d6a:	2f 81       	ldd	r18, Y+7	; 0x07
     d6c:	38 85       	ldd	r19, Y+8	; 0x08
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	a9 01       	movw	r20, r18
     d74:	48 1b       	sub	r20, r24
     d76:	59 0b       	sbc	r21, r25
     d78:	ca 01       	movw	r24, r20
     d7a:	9c 01       	movw	r18, r24
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	c8 01       	movw	r24, r16
     d82:	b7 01       	movw	r22, r14
     d84:	0e 94 16 11 	call	0x222c	; 0x222c <__udivmodsi4>
     d88:	da 01       	movw	r26, r20
     d8a:	c9 01       	movw	r24, r18
     d8c:	9c 01       	movw	r18, r24
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03

	return  data ;
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d9e:	2c 96       	adiw	r28, 0x0c	; 12
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_voidSetPortDirection+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_voidSetPortDirection+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3c 83       	std	Y+4, r19	; 0x04
     dd0:	2b 83       	std	Y+3, r18	; 0x03
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	d1 f0       	breq	.+52     	; 0xe10 <DIO_voidSetPortDirection+0x58>
     ddc:	2b 81       	ldd	r18, Y+3	; 0x03
     dde:	3c 81       	ldd	r19, Y+4	; 0x04
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <DIO_voidSetPortDirection+0x38>
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	61 f0       	breq	.+24     	; 0xe06 <DIO_voidSetPortDirection+0x4e>
     dee:	1e c0       	rjmp	.+60     	; 0xe2c <DIO_voidSetPortDirection+0x74>
     df0:	2b 81       	ldd	r18, Y+3	; 0x03
     df2:	3c 81       	ldd	r19, Y+4	; 0x04
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	81 f0       	breq	.+32     	; 0xe1a <DIO_voidSetPortDirection+0x62>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	81 f0       	breq	.+32     	; 0xe24 <DIO_voidSetPortDirection+0x6c>
     e04:	13 c0       	rjmp	.+38     	; 0xe2c <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
     e06:	ea e3       	ldi	r30, 0x3A	; 58
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	80 83       	st	Z, r24
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	80 83       	st	Z, r24
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	80 83       	st	Z, r24
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	80 83       	st	Z, r24

	}
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_voidSetPortValue+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_voidSetPortValue+0x8>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 83       	std	Y+4, r19	; 0x04
     e52:	2b 83       	std	Y+3, r18	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	d1 f0       	breq	.+52     	; 0xe92 <DIO_voidSetPortValue+0x58>
     e5e:	2b 81       	ldd	r18, Y+3	; 0x03
     e60:	3c 81       	ldd	r19, Y+4	; 0x04
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <DIO_voidSetPortValue+0x38>
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <DIO_voidSetPortValue+0x4e>
     e70:	1e c0       	rjmp	.+60     	; 0xeae <DIO_voidSetPortValue+0x74>
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	81 f0       	breq	.+32     	; 0xe9c <DIO_voidSetPortValue+0x62>
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	81 f0       	breq	.+32     	; 0xea6 <DIO_voidSetPortValue+0x6c>
     e86:	13 c0       	rjmp	.+38     	; 0xeae <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	80 83       	st	Z, r24
     e90:	0e c0       	rjmp	.+28     	; 0xeae <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
     e9c:	e5 e3       	ldi	r30, 0x35	; 53
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	80 83       	st	Z, r24
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
     ea6:	e2 e3       	ldi	r30, 0x32	; 50
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	80 83       	st	Z, r24

	}
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	27 97       	sbiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0 &&Copy_u8PinID<=PIN_7)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	08 f0       	brcs	.+2      	; 0xede <DIO_voidSetPinDirection+0x22>
     edc:	ea c0       	rjmp	.+468    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_voidSetPinDirection+0x2a>
     ee4:	6f c0       	rjmp	.+222    	; 0xfc4 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3f 83       	std	Y+7, r19	; 0x07
     eee:	2e 83       	std	Y+6, r18	; 0x06
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	49 f1       	breq	.+82     	; 0xf4c <DIO_voidSetPinDirection+0x90>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	2c f4       	brge	.+10     	; 0xf0e <DIO_voidSetPinDirection+0x52>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	61 f0       	breq	.+24     	; 0xf24 <DIO_voidSetPinDirection+0x68>
     f0c:	d2 c0       	rjmp	.+420    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
     f0e:	2e 81       	ldd	r18, Y+6	; 0x06
     f10:	3f 81       	ldd	r19, Y+7	; 0x07
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	71 f1       	breq	.+92     	; 0xf74 <DIO_voidSetPinDirection+0xb8>
     f18:	8e 81       	ldd	r24, Y+6	; 0x06
     f1a:	9f 81       	ldd	r25, Y+7	; 0x07
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	e9 f1       	breq	.+122    	; 0xf9c <DIO_voidSetPinDirection+0xe0>
     f22:	c7 c0       	rjmp	.+398    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
     f24:	aa e3       	ldi	r26, 0x3A	; 58
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e3       	ldi	r30, 0x3A	; 58
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_voidSetPinDirection+0x86>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_voidSetPinDirection+0x82>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	b3 c0       	rjmp	.+358    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_voidSetPinDirection+0xae>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_voidSetPinDirection+0xaa>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	9f c0       	rjmp	.+318    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
     f74:	a4 e3       	ldi	r26, 0x34	; 52
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_voidSetPinDirection+0xd6>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_voidSetPinDirection+0xd2>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	8b c0       	rjmp	.+278    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
     f9c:	a1 e3       	ldi	r26, 0x31	; 49
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e3       	ldi	r30, 0x31	; 49
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_voidSetPinDirection+0xfe>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_voidSetPinDirection+0xfa>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	77 c0       	rjmp	.+238    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 23       	and	r24, r24
     fc8:	09 f0       	breq	.+2      	; 0xfcc <DIO_voidSetPinDirection+0x110>
     fca:	73 c0       	rjmp	.+230    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3d 83       	std	Y+5, r19	; 0x05
     fd4:	2c 83       	std	Y+4, r18	; 0x04
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	59 f1       	breq	.+86     	; 0x1036 <DIO_voidSetPinDirection+0x17a>
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	3d 81       	ldd	r19, Y+5	; 0x05
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	2c f4       	brge	.+10     	; 0xff4 <DIO_voidSetPinDirection+0x138>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f0       	breq	.+26     	; 0x100c <DIO_voidSetPinDirection+0x150>
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	89 f1       	breq	.+98     	; 0x1060 <DIO_voidSetPinDirection+0x1a4>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_voidSetPinDirection+0x14e>
    1008:	40 c0       	rjmp	.+128    	; 0x108a <DIO_voidSetPinDirection+0x1ce>
    100a:	53 c0       	rjmp	.+166    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_voidSetPinDirection+0x16e>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_voidSetPinDirection+0x16a>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	3e c0       	rjmp	.+124    	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    1036:	a7 e3       	ldi	r26, 0x37	; 55
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e7 e3       	ldi	r30, 0x37	; 55
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_voidSetPinDirection+0x198>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_voidSetPinDirection+0x194>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	29 c0       	rjmp	.+82     	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1060:	a4 e3       	ldi	r26, 0x34	; 52
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e3       	ldi	r30, 0x34	; 52
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_voidSetPinDirection+0x1c2>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_voidSetPinDirection+0x1be>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    108a:	a1 e3       	ldi	r26, 0x31	; 49
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e3       	ldi	r30, 0x31	; 49
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_voidSetPinDirection+0x1ec>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_voidSetPinDirection+0x1e8>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    10b2:	27 96       	adiw	r28, 0x07	; 7
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	27 97       	sbiw	r28, 0x07	; 7
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
    10dc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0&&Copy_u8PinID<=PIN_7)
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <DIO_voidSetPinValue+0x22>
    10e4:	ea c0       	rjmp	.+468    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <DIO_voidSetPinValue+0x2a>
    10ec:	6f c0       	rjmp	.+222    	; 0x11cc <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3f 83       	std	Y+7, r19	; 0x07
    10f6:	2e 83       	std	Y+6, r18	; 0x06
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	49 f1       	breq	.+82     	; 0x1154 <DIO_voidSetPinValue+0x90>
    1102:	2e 81       	ldd	r18, Y+6	; 0x06
    1104:	3f 81       	ldd	r19, Y+7	; 0x07
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <DIO_voidSetPinValue+0x52>
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	61 f0       	breq	.+24     	; 0x112c <DIO_voidSetPinValue+0x68>
    1114:	d2 c0       	rjmp	.+420    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	71 f1       	breq	.+92     	; 0x117c <DIO_voidSetPinValue+0xb8>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	e9 f1       	breq	.+122    	; 0x11a4 <DIO_voidSetPinValue+0xe0>
    112a:	c7 c0       	rjmp	.+398    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_voidSetPinValue+0x86>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_voidSetPinValue+0x82>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	b3 c0       	rjmp	.+358    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    1154:	a8 e3       	ldi	r26, 0x38	; 56
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e3       	ldi	r30, 0x38	; 56
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_voidSetPinValue+0xae>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_voidSetPinValue+0xaa>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	9f c0       	rjmp	.+318    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    117c:	a5 e3       	ldi	r26, 0x35	; 53
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e5 e3       	ldi	r30, 0x35	; 53
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_voidSetPinValue+0xd6>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_voidSetPinValue+0xd2>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	8b c0       	rjmp	.+278    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_voidSetPinValue+0xfe>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_voidSetPinValue+0xfa>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	77 c0       	rjmp	.+238    	; 0x12ba <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 23       	and	r24, r24
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <DIO_voidSetPinValue+0x110>
    11d2:	73 c0       	rjmp	.+230    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3d 83       	std	Y+5, r19	; 0x05
    11dc:	2c 83       	std	Y+4, r18	; 0x04
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	59 f1       	breq	.+86     	; 0x123e <DIO_voidSetPinValue+0x17a>
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	2c f4       	brge	.+10     	; 0x11fc <DIO_voidSetPinValue+0x138>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f0       	breq	.+26     	; 0x1214 <DIO_voidSetPinValue+0x150>
    11fa:	5f c0       	rjmp	.+190    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
    11fc:	2c 81       	ldd	r18, Y+4	; 0x04
    11fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	89 f1       	breq	.+98     	; 0x1268 <DIO_voidSetPinValue+0x1a4>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <DIO_voidSetPinValue+0x14e>
    1210:	40 c0       	rjmp	.+128    	; 0x1292 <DIO_voidSetPinValue+0x1ce>
    1212:	53 c0       	rjmp	.+166    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    1214:	ab e3       	ldi	r26, 0x3B	; 59
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	eb e3       	ldi	r30, 0x3B	; 59
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_voidSetPinValue+0x16e>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_voidSetPinValue+0x16a>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	3e c0       	rjmp	.+124    	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    123e:	a8 e3       	ldi	r26, 0x38	; 56
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e8 e3       	ldi	r30, 0x38	; 56
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_voidSetPinValue+0x198>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_voidSetPinValue+0x194>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	29 c0       	rjmp	.+82     	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_voidSetPinValue+0x1c2>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_voidSetPinValue+0x1be>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1292:	a2 e3       	ldi	r26, 0x32	; 50
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_voidSetPinValue+0x1ec>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_voidSetPinValue+0x1e8>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24

			}
		}
	}
}
    12ba:	27 96       	adiw	r28, 0x07	; 7
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DIO_u8GetBitValue+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_u8GetBitValue+0x8>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	8a 83       	std	Y+2, r24	; 0x02
    12dc:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7 )
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <DIO_u8GetBitValue+0x1a>
    12e4:	67 c0       	rjmp	.+206    	; 0x13b4 <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3d 83       	std	Y+5, r19	; 0x05
    12ee:	2c 83       	std	Y+4, r18	; 0x04
    12f0:	4c 81       	ldd	r20, Y+4	; 0x04
    12f2:	5d 81       	ldd	r21, Y+5	; 0x05
    12f4:	41 30       	cpi	r20, 0x01	; 1
    12f6:	51 05       	cpc	r21, r1
    12f8:	41 f1       	breq	.+80     	; 0x134a <DIO_u8GetBitValue+0x7e>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	34 f4       	brge	.+12     	; 0x1310 <DIO_u8GetBitValue+0x44>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	21 15       	cp	r18, r1
    130a:	31 05       	cpc	r19, r1
    130c:	61 f0       	breq	.+24     	; 0x1326 <DIO_u8GetBitValue+0x5a>
    130e:	52 c0       	rjmp	.+164    	; 0x13b4 <DIO_u8GetBitValue+0xe8>
    1310:	4c 81       	ldd	r20, Y+4	; 0x04
    1312:	5d 81       	ldd	r21, Y+5	; 0x05
    1314:	42 30       	cpi	r20, 0x02	; 2
    1316:	51 05       	cpc	r21, r1
    1318:	51 f1       	breq	.+84     	; 0x136e <DIO_u8GetBitValue+0xa2>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	b9 f1       	breq	.+110    	; 0x1392 <DIO_u8GetBitValue+0xc6>
    1324:	47 c0       	rjmp	.+142    	; 0x13b4 <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1326:	e9 e3       	ldi	r30, 0x39	; 57
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_u8GetBitValue+0x72>
    133a:	55 95       	asr	r21
    133c:	47 95       	ror	r20
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_u8GetBitValue+0x6e>
    1342:	ca 01       	movw	r24, r20
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	35 c0       	rjmp	.+106    	; 0x13b4 <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    134a:	e6 e3       	ldi	r30, 0x36	; 54
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_u8GetBitValue+0x96>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_u8GetBitValue+0x92>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	23 c0       	rjmp	.+70     	; 0x13b4 <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    136e:	e3 e3       	ldi	r30, 0x33	; 51
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_u8GetBitValue+0xba>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_u8GetBitValue+0xb6>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	11 c0       	rjmp	.+34     	; 0x13b4 <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1392:	e0 e3       	ldi	r30, 0x30	; 48
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a9 01       	movw	r20, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8GetBitValue+0xde>
    13a6:	55 95       	asr	r21
    13a8:	47 95       	ror	r20
    13aa:	8a 95       	dec	r24
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8GetBitValue+0xda>
    13ae:	ca 01       	movw	r24, r20
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <DIO_u8GetPinValue>:
//
//	}
//
//
u8 DIO_u8GetPinValue(u8 copy_u8PortID , u8 copy_PinID)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <DIO_u8GetPinValue+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DIO_u8GetPinValue+0x8>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	6b 83       	std	Y+3, r22	; 0x03
    u8 value = 0;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    switch(copy_u8PortID)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3d 83       	std	Y+5, r19	; 0x05
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	4c 81       	ldd	r20, Y+4	; 0x04
    13e6:	5d 81       	ldd	r21, Y+5	; 0x05
    13e8:	41 30       	cpi	r20, 0x01	; 1
    13ea:	51 05       	cpc	r21, r1
    13ec:	41 f1       	breq	.+80     	; 0x143e <DIO_u8GetPinValue+0x78>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	91 05       	cpc	r25, r1
    13f6:	34 f4       	brge	.+12     	; 0x1404 <DIO_u8GetPinValue+0x3e>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	61 f0       	breq	.+24     	; 0x141a <DIO_u8GetPinValue+0x54>
    1402:	52 c0       	rjmp	.+164    	; 0x14a8 <DIO_u8GetPinValue+0xe2>
    1404:	4c 81       	ldd	r20, Y+4	; 0x04
    1406:	5d 81       	ldd	r21, Y+5	; 0x05
    1408:	42 30       	cpi	r20, 0x02	; 2
    140a:	51 05       	cpc	r21, r1
    140c:	51 f1       	breq	.+84     	; 0x1462 <DIO_u8GetPinValue+0x9c>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	b9 f1       	breq	.+110    	; 0x1486 <DIO_u8GetPinValue+0xc0>
    1418:	47 c0       	rjmp	.+142    	; 0x14a8 <DIO_u8GetPinValue+0xe2>
    {
        case PORTA_ID: value = GET_BIT(PINA_REG, copy_PinID); break;
    141a:	e9 e3       	ldi	r30, 0x39	; 57
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8GetPinValue+0x6c>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8GetPinValue+0x68>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	35 c0       	rjmp	.+106    	; 0x14a8 <DIO_u8GetPinValue+0xe2>
        case PORTB_ID: value = GET_BIT(PINB_REG, copy_PinID); break;
    143e:	e6 e3       	ldi	r30, 0x36	; 54
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8GetPinValue+0x90>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8GetPinValue+0x8c>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	23 c0       	rjmp	.+70     	; 0x14a8 <DIO_u8GetPinValue+0xe2>
        case PORTC_ID: value = GET_BIT(PINC_REG, copy_PinID); break;
    1462:	e3 e3       	ldi	r30, 0x33	; 51
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_u8GetPinValue+0xb4>
    1476:	55 95       	asr	r21
    1478:	47 95       	ror	r20
    147a:	8a 95       	dec	r24
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_u8GetPinValue+0xb0>
    147e:	ca 01       	movw	r24, r20
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <DIO_u8GetPinValue+0xe2>
        case PORTD_ID: value = GET_BIT(PIND_REG, copy_PinID); break;
    1486:	e0 e3       	ldi	r30, 0x30	; 48
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8GetPinValue+0xd8>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_u8GetPinValue+0xd4>
    14a2:	ca 01       	movw	r24, r20
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_voidToggelPin>:


/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_voidToggelPin+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_voidToggelPin+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <DIO_voidToggelPin+0x18>
    14d0:	6e c0       	rjmp	.+220    	; 0x15ae <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3c 83       	std	Y+4, r19	; 0x04
    14da:	2b 83       	std	Y+3, r18	; 0x03
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	49 f1       	breq	.+82     	; 0x1538 <DIO_voidToggelPin+0x7e>
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <DIO_voidToggelPin+0x40>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <DIO_voidToggelPin+0x56>
    14f8:	5a c0       	rjmp	.+180    	; 0x15ae <DIO_voidToggelPin+0xf4>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	71 f1       	breq	.+92     	; 0x1560 <DIO_voidToggelPin+0xa6>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	e9 f1       	breq	.+122    	; 0x1588 <DIO_voidToggelPin+0xce>
    150e:	4f c0       	rjmp	.+158    	; 0x15ae <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_voidToggelPin+0x74>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_voidToggelPin+0x70>
    1532:	84 27       	eor	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	3b c0       	rjmp	.+118    	; 0x15ae <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_voidToggelPin+0x9c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_voidToggelPin+0x98>
    155a:	84 27       	eor	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	27 c0       	rjmp	.+78     	; 0x15ae <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1560:	a5 e3       	ldi	r26, 0x35	; 53
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_voidToggelPin+0xc4>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_voidToggelPin+0xc0>
    1582:	84 27       	eor	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1588:	a2 e3       	ldi	r26, 0x32	; 50
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e2 e3       	ldi	r30, 0x32	; 50
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_voidToggelPin+0xec>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_voidToggelPin+0xe8>
    15aa:	84 27       	eor	r24, r20
    15ac:	8c 93       	st	X, r24
		}

	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    15c4:	af e5       	ldi	r26, 0x5F	; 95
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ef e5       	ldi	r30, 0x5F	; 95
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 68       	ori	r24, 0x80	; 128
    15d0:	8c 93       	st	X, r24

}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <GIE_Disable>:

void GIE_Disable(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    15e0:	af e5       	ldi	r26, 0x5F	; 95
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ef e5       	ldi	r30, 0x5F	; 95
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 77       	andi	r24, 0x7F	; 127
    15ec:	8c 93       	st	X, r24

}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	2e 97       	sbiw	r28, 0x0e	; 14
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a0 ef       	ldi	r26, 0xF0	; 240
    160e:	b1 e4       	ldi	r27, 0x41	; 65
    1610:	8b 87       	std	Y+11, r24	; 0x0b
    1612:	9c 87       	std	Y+12, r25	; 0x0c
    1614:	ad 87       	std	Y+13, r26	; 0x0d
    1616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1618:	6b 85       	ldd	r22, Y+11	; 0x0b
    161a:	7c 85       	ldd	r23, Y+12	; 0x0c
    161c:	8d 85       	ldd	r24, Y+13	; 0x0d
    161e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	53 e4       	ldi	r21, 0x43	; 67
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	98 87       	std	Y+8, r25	; 0x08
    1634:	a9 87       	std	Y+9, r26	; 0x09
    1636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	2c f4       	brge	.+10     	; 0x165a <LCD_voidInit+0x66>
		__ticks = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	57 e4       	ldi	r21, 0x47	; 71
    166a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166e:	18 16       	cp	r1, r24
    1670:	4c f5       	brge	.+82     	; 0x16c4 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <LCD_voidInit+0xc6>
    169c:	89 e1       	ldi	r24, 0x19	; 25
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_voidInit+0xb4>
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f7       	brne	.-38     	; 0x169c <LCD_voidInit+0xa8>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_voidInit+0xf0>
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	66 e0       	ldi	r22, 0x06	; 6
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	67 e0       	ldi	r22, 0x07	; 7
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	62 e0       	ldi	r22, 0x02	; 2
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	63 e0       	ldi	r22, 0x03	; 3
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	64 e0       	ldi	r22, 0x04	; 4
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	65 e0       	ldi	r22, 0x05	; 5
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    172e:	88 e2       	ldi	r24, 0x28	; 40
    1730:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1734:	8c e0       	ldi	r24, 0x0C	; 12
    1736:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

}
    1746:	2e 96       	adiw	r28, 0x0e	; 14
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	6d 97       	sbiw	r28, 0x1d	; 29
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_7) );
    176e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1770:	98 2f       	mov	r25, r24
    1772:	99 1f       	adc	r25, r25
    1774:	99 27       	eor	r25, r25
    1776:	99 1f       	adc	r25, r25
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	49 2f       	mov	r20, r25
    177e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_6) );
    1782:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1784:	82 95       	swap	r24
    1786:	86 95       	lsr	r24
    1788:	86 95       	lsr	r24
    178a:	83 70       	andi	r24, 0x03	; 3
    178c:	98 2f       	mov	r25, r24
    178e:	91 70       	andi	r25, 0x01	; 1
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	64 e0       	ldi	r22, 0x04	; 4
    1794:	49 2f       	mov	r20, r25
    1796:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_5) );
    179a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179c:	82 95       	swap	r24
    179e:	86 95       	lsr	r24
    17a0:	87 70       	andi	r24, 0x07	; 7
    17a2:	98 2f       	mov	r25, r24
    17a4:	91 70       	andi	r25, 0x01	; 1
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	49 2f       	mov	r20, r25
    17ac:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_4) );
    17b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b2:	82 95       	swap	r24
    17b4:	8f 70       	andi	r24, 0x0F	; 15
    17b6:	98 2f       	mov	r25, r24
    17b8:	91 70       	andi	r25, 0x01	; 1
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	62 e0       	ldi	r22, 0x02	; 2
    17be:	49 2f       	mov	r20, r25
    17c0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	67 e0       	ldi	r22, 0x07	; 7
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e4       	ldi	r27, 0x40	; 64
    17d6:	89 8f       	std	Y+25, r24	; 0x19
    17d8:	9a 8f       	std	Y+26, r25	; 0x1a
    17da:	ab 8f       	std	Y+27, r26	; 0x1b
    17dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	69 8d       	ldd	r22, Y+25	; 0x19
    17e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	53 e4       	ldi	r21, 0x43	; 67
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8d 8b       	std	Y+21, r24	; 0x15
    17f8:	9e 8b       	std	Y+22, r25	; 0x16
    17fa:	af 8b       	std	Y+23, r26	; 0x17
    17fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 8b       	std	Y+20, r25	; 0x14
    181c:	8b 8b       	std	Y+19, r24	; 0x13
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	69 8d       	ldd	r22, Y+25	; 0x19
    183a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_voidWriteBitsToSend+0x128>
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9a 8b       	std	Y+18, r25	; 0x12
    1868:	89 8b       	std	Y+17, r24	; 0x11
    186a:	89 89       	ldd	r24, Y+17	; 0x11
    186c:	9a 89       	ldd	r25, Y+18	; 0x12
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_voidWriteBitsToSend+0x116>
    1872:	9a 8b       	std	Y+18, r25	; 0x12
    1874:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8b 89       	ldd	r24, Y+19	; 0x13
    1878:	9c 89       	ldd	r25, Y+20	; 0x14
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9c 8b       	std	Y+20, r25	; 0x14
    187e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_voidWriteBitsToSend+0x10a>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6d 89       	ldd	r22, Y+21	; 0x15
    188c:	7e 89       	ldd	r23, Y+22	; 0x16
    188e:	8f 89       	ldd	r24, Y+23	; 0x17
    1890:	98 8d       	ldd	r25, Y+24	; 0x18
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9c 8b       	std	Y+20, r25	; 0x14
    189c:	8b 8b       	std	Y+19, r24	; 0x13
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	98 8b       	std	Y+16, r25	; 0x10
    18a4:	8f 87       	std	Y+15, r24	; 0x0f
    18a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a8:	98 89       	ldd	r25, Y+16	; 0x10
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_voidWriteBitsToSend+0x152>
    18ae:	98 8b       	std	Y+16, r25	; 0x10
    18b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	67 e0       	ldi	r22, 0x07	; 7
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_3) );
    18bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18be:	86 95       	lsr	r24
    18c0:	86 95       	lsr	r24
    18c2:	86 95       	lsr	r24
    18c4:	98 2f       	mov	r25, r24
    18c6:	91 70       	andi	r25, 0x01	; 1
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	49 2f       	mov	r20, r25
    18ce:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_2) );
    18d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d4:	86 95       	lsr	r24
    18d6:	86 95       	lsr	r24
    18d8:	98 2f       	mov	r25, r24
    18da:	91 70       	andi	r25, 0x01	; 1
    18dc:	82 e0       	ldi	r24, 0x02	; 2
    18de:	64 e0       	ldi	r22, 0x04	; 4
    18e0:	49 2f       	mov	r20, r25
    18e2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_1) );
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	86 95       	lsr	r24
    18ea:	98 2f       	mov	r25, r24
    18ec:	91 70       	andi	r25, 0x01	; 1
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	49 2f       	mov	r20, r25
    18f4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_0) );
    18f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fa:	98 2f       	mov	r25, r24
    18fc:	91 70       	andi	r25, 0x01	; 1
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	49 2f       	mov	r20, r25
    1904:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	67 e0       	ldi	r22, 0x07	; 7
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e4       	ldi	r27, 0x40	; 64
    191a:	8b 87       	std	Y+11, r24	; 0x0b
    191c:	9c 87       	std	Y+12, r25	; 0x0c
    191e:	ad 87       	std	Y+13, r26	; 0x0d
    1920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8f 83       	std	Y+7, r24	; 0x07
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	a9 87       	std	Y+9, r26	; 0x09
    1940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_voidWriteBitsToSend+0x26c>
    19a6:	89 e1       	ldi	r24, 0x19	; 25
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_voidWriteBitsToSend+0x25a>
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_voidWriteBitsToSend+0x24e>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_voidWriteBitsToSend+0x296>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	67 e0       	ldi	r22, 0x07	; 7
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>




}
    1a00:	6d 96       	adiw	r28, 0x1d	; 29
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteBitsToSend>
}
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	66 e0       	ldi	r22, 0x06	; 6
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteBitsToSend>
}
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <LCD_voidWriteString+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <LCD_voidWriteString+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    1a6a:	1a 82       	std	Y+2, r1	; 0x02
    1a6c:	19 82       	std	Y+1, r1	; 0x01
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	f9 01       	movw	r30, r18
    1a7a:	e8 0f       	add	r30, r24
    1a7c:	f9 1f       	adc	r31, r25
    1a7e:	80 81       	ld	r24, Z
    1a80:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteData>
		i++;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	f9 01       	movw	r30, r18
    1a98:	e8 0f       	add	r30, r24
    1a9a:	f9 1f       	adc	r31, r25
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 23       	and	r24, r24
    1aa0:	39 f7       	brne	.-50     	; 0x1a70 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	27 97       	sbiw	r28, 0x07	; 7
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	8e 83       	std	Y+6, r24	; 0x06
    1ac6:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    1ac8:	1a 82       	std	Y+2, r1	; 0x02
    1aca:	80 e4       	ldi	r24, 0x40	; 64
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	84 e1       	ldi	r24, 0x14	; 20
    1ad0:	8c 83       	std	Y+4, r24	; 0x04
    1ad2:	84 e5       	ldi	r24, 0x54	; 84
    1ad4:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	ce 01       	movw	r24, r28
    1ade:	02 96       	adiw	r24, 0x02	; 2
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	e2 0f       	add	r30, r18
    1ae4:	f3 1f       	adc	r31, r19
    1ae6:	90 81       	ld	r25, Z
    1ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aea:	89 0f       	add	r24, r25
    1aec:	80 58       	subi	r24, 0x80	; 128
    1aee:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

}
    1af6:	27 96       	adiw	r28, 0x07	; 7
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>

}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	63 97       	sbiw	r28, 0x13	; 19
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	68 8b       	std	Y+16, r22	; 0x10
    1b36:	79 8b       	std	Y+17, r23	; 0x11
    1b38:	8a 8b       	std	Y+18, r24	; 0x12
    1b3a:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    1b3c:	88 89       	ldd	r24, Y+16	; 0x10
    1b3e:	99 89       	ldd	r25, Y+17	; 0x11
    1b40:	aa 89       	ldd	r26, Y+18	; 0x12
    1b42:	bb 89       	ldd	r27, Y+19	; 0x13
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	9b 83       	std	Y+3, r25	; 0x03
    1b48:	ac 83       	std	Y+4, r26	; 0x04
    1b4a:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1b4c:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	08 2f       	mov	r16, r24
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	9b 81       	ldd	r25, Y+3	; 0x03
    1b58:	ac 81       	ldd	r26, Y+4	; 0x04
    1b5a:	bd 81       	ldd	r27, Y+5	; 0x05
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 16 11 	call	0x222c	; 0x222c <__udivmodsi4>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	28 2f       	mov	r18, r24
    1b72:	20 5d       	subi	r18, 0xD0	; 208
    1b74:	ce 01       	movw	r24, r28
    1b76:	06 96       	adiw	r24, 0x06	; 6
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e0 0f       	add	r30, r16
    1b7c:	f1 1f       	adc	r31, r17
    1b7e:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	ac 81       	ldd	r26, Y+4	; 0x04
    1b86:	bd 81       	ldd	r27, Y+5	; 0x05
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 16 11 	call	0x222c	; 0x222c <__udivmodsi4>
    1b98:	da 01       	movw	r26, r20
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	9b 83       	std	Y+3, r25	; 0x03
    1ba0:	ac 83       	std	Y+4, r26	; 0x04
    1ba2:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	ac 81       	ldd	r26, Y+4	; 0x04
    1bb0:	bd 81       	ldd	r27, Y+5	; 0x05
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	a1 05       	cpc	r26, r1
    1bb6:	b1 05       	cpc	r27, r1
    1bb8:	51 f6       	brne	.-108    	; 0x1b4e <LCD_voidWriteNumber+0x32>
    1bba:	11 c0       	rjmp	.+34     	; 0x1bde <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	21 50       	subi	r18, 0x01	; 1
    1bc6:	30 40       	sbci	r19, 0x00	; 0
    1bc8:	ce 01       	movw	r24, r28
    1bca:	06 96       	adiw	r24, 0x06	; 6
    1bcc:	fc 01       	movw	r30, r24
    1bce:	e2 0f       	add	r30, r18
    1bd0:	f3 1f       	adc	r31, r19
    1bd2:	80 81       	ld	r24, Z
    1bd4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	81 50       	subi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	88 23       	and	r24, r24
    1be2:	61 f7       	brne	.-40     	; 0x1bbc <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    1be4:	63 96       	adiw	r28, 0x13	; 19
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    1c02:	0f 92       	push	r0
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    1c0e:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	08 96       	adiw	r24, 0x08	; 8
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	78 f3       	brcs	.-34     	; 0x1c30 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <LCD_voidWriteData>

}
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <M_TIMER1_voidPwm1Init>:
#include "TIMER1_config.h"



void M_TIMER1_voidPwm1Init(void)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	/* to enable output circuit for PD5 pin */

	DIO_voidSetPinDirection(PORTD_ID,PIN_5,PIN_OUTPUT);
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	65 e0       	ldi	r22, 0x05	; 5
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>

	/* to select mode 14 in table 47 */
	CLR_BIT(TCCR1A_REG,WGM10);
    1c8e:	af e4       	ldi	r26, 0x4F	; 79
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
    1c9c:	af e4       	ldi	r26, 0x4F	; 79
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	ef e4       	ldi	r30, 0x4F	; 79
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	82 60       	ori	r24, 0x02	; 2
    1ca8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
    1caa:	ae e4       	ldi	r26, 0x4E	; 78
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ee e4       	ldi	r30, 0x4E	; 78
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 60       	ori	r24, 0x08	; 8
    1cb6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM13);
    1cb8:	ae e4       	ldi	r26, 0x4E	; 78
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	ee e4       	ldi	r30, 0x4E	; 78
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 61       	ori	r24, 0x10	; 16
    1cc4:	8c 93       	st	X, r24

	/* to select non inverting mode */
	SET_BIT(TCCR1A_REG,COM1A1);
    1cc6:	af e4       	ldi	r26, 0x4F	; 79
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ef e4       	ldi	r30, 0x4F	; 79
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 68       	ori	r24, 0x80	; 128
    1cd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,COM1A0);
    1cd4:	af e4       	ldi	r26, 0x4F	; 79
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ef e4       	ldi	r30, 0x4F	; 79
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8f 7b       	andi	r24, 0xBF	; 191
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <M_TIMER1_voidPwm1SetTop>:
void M_TIMER1_voidPwm1SetTop(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	//to make TIMER at 20ms top  when PRESCALER = 256  at  8M F
	ICR1_REG=19999;
    1cf0:	e6 e4       	ldi	r30, 0x46	; 70
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8f e1       	ldi	r24, 0x1F	; 31
    1cf6:	9e e4       	ldi	r25, 0x4E	; 78
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
}
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <M_TIMER1_voidPwm1SetDutyCycle>:
void M_TIMER1_voidPwm1SetDutyCycle(u16 Copy_u8DutyCycle)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <M_TIMER1_voidPwm1SetDutyCycle+0x6>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	// pass num between 25 and 65
	OCR1A_REG=Copy_u8DutyCycle ;
    1d10:	ea e4       	ldi	r30, 0x4A	; 74
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24

}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <M_TIMER1_voidPwm1Start>:
void M_TIMER1_voidPwm1Start(void)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
#if   TIMER1_PRESCALER   ==   1024
	SET_BIT(TCCR1B_REG,CS10);
	CLR_BIT(TCCR1B_REG,CS11);
	SET_BIT(TCCR1B_REG,CS12);
#elif TIMER1_PRESCALER   ==   256
	CLR_BIT(TCCR1B_REG,CS10);
    1d2e:	ae e4       	ldi	r26, 0x4E	; 78
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ee e4       	ldi	r30, 0x4E	; 78
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8e 7f       	andi	r24, 0xFE	; 254
    1d3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    1d3c:	ae e4       	ldi	r26, 0x4E	; 78
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8d 7f       	andi	r24, 0xFD	; 253
    1d48:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS12);
    1d4a:	ae e4       	ldi	r26, 0x4E	; 78
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ee e4       	ldi	r30, 0x4E	; 78
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	84 60       	ori	r24, 0x04	; 4
    1d56:	8c 93       	st	X, r24
#endif
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <M_TIMER1_voidPwm1Stop>:
void M_TIMER1_voidPwm1Stop(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
    1d66:	ae e4       	ldi	r26, 0x4E	; 78
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ee e4       	ldi	r30, 0x4E	; 78
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
    1d74:	ae e4       	ldi	r26, 0x4E	; 78
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ee e4       	ldi	r30, 0x4E	; 78
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8d 7f       	andi	r24, 0xFD	; 253
    1d80:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
    1d82:	ae e4       	ldi	r26, 0x4E	; 78
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ee e4       	ldi	r30, 0x4E	; 78
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8b 7f       	andi	r24, 0xFB	; 251
    1d8e:	8c 93       	st	X, r24
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <TIMER_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER_voidSetCallBack(  void (*ptr_timer)(void) )
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <TIMER_voidSetCallBack+0x6>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <TIMER_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	90 93 ab 00 	sts	0x00AB, r25
    1db4:	80 93 aa 00 	sts	0x00AA, r24

	}
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
    1dec:	e0 91 aa 00 	lds	r30, 0x00AA
    1df0:	f0 91 ab 00 	lds	r31, 0x00AB
    1df4:	09 95       	icall

}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	ff 91       	pop	r31
    1dfc:	ef 91       	pop	r30
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	7f 91       	pop	r23
    1e08:	6f 91       	pop	r22
    1e0a:	5f 91       	pop	r21
    1e0c:	4f 91       	pop	r20
    1e0e:	3f 91       	pop	r19
    1e10:	2f 91       	pop	r18
    1e12:	0f 90       	pop	r0
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	0f 90       	pop	r0
    1e18:	1f 90       	pop	r1
    1e1a:	18 95       	reti

00001e1c <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
    1e24:	e3 e5       	ldi	r30, 0x53	; 83
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8f 7b       	andi	r24, 0xBF	; 191
    1e2c:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
    1e2e:	e3 e5       	ldi	r30, 0x53	; 83
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	87 7f       	andi	r24, 0xF7	; 247
    1e36:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
    1e38:	e2 e5       	ldi	r30, 0x52	; 82
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
    1e3e:	e9 e5       	ldi	r30, 0x59	; 89
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	81 60       	ori	r24, 0x01	; 1
    1e46:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
    1e56:	e3 e5       	ldi	r30, 0x53	; 83
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 7f       	andi	r24, 0xF8	; 248
    1e5e:	80 83       	st	Z, r24

}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
    1e6e:	e3 e5       	ldi	r30, 0x53	; 83
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	88 7f       	andi	r24, 0xF8	; 248
    1e76:	82 60       	ori	r24, 0x02	; 2
    1e78:	80 83       	st	Z, r24

}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
    1e8c:	e2 e5       	ldi	r30, 0x52	; 82
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	80 83       	st	Z, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
    1ea4:	e2 e5       	ldi	r30, 0x52	; 82
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
}
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
    1ecc:	e1 e4       	ldi	r30, 0x41	; 65
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 60       	ori	r24, 0x08	; 8
    1ed4:	80 83       	st	Z, r24
}
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
    1ee4:	e1 e4       	ldi	r30, 0x41	; 65
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	88 e1       	ldi	r24, 0x18	; 24
    1eea:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
    1eec:	e1 e4       	ldi	r30, 0x41	; 65
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	87 7f       	andi	r24, 0xF7	; 247
    1ef4:	80 83       	st	Z, r24
}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
    1f08:	e1 e4       	ldi	r30, 0x41	; 65
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	87 70       	andi	r24, 0x07	; 7
    1f10:	98 2f       	mov	r25, r24
    1f12:	97 70       	andi	r25, 0x07	; 7
    1f14:	80 81       	ld	r24, Z
    1f16:	88 7f       	andi	r24, 0xF8	; 248
    1f18:	89 2b       	or	r24, r25
    1f1a:	80 83       	st	Z, r24

}
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <TIMER0_voidDelay_ms>:
#define YELLOW_LED_PIN        PIN_1
#define GREEN_LED_PIN         PIN_2
#define LED_PORT              PORTB_ID


void TIMER0_voidDelay_ms(u32 time_ms) {
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	28 97       	sbiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	6d 83       	std	Y+5, r22	; 0x05
    1f3a:	7e 83       	std	Y+6, r23	; 0x06
    1f3c:	8f 83       	std	Y+7, r24	; 0x07
    1f3e:	98 87       	std	Y+8, r25	; 0x08
    u32 i;
    for (i = 0; i < time_ms; i++) {
    1f40:	19 82       	std	Y+1, r1	; 0x01
    1f42:	1a 82       	std	Y+2, r1	; 0x02
    1f44:	1b 82       	std	Y+3, r1	; 0x03
    1f46:	1c 82       	std	Y+4, r1	; 0x04
    1f48:	1e c0       	rjmp	.+60     	; 0x1f86 <TIMER0_voidDelay_ms+0x62>
        TCNT0 = 0;
    1f4a:	e2 e5       	ldi	r30, 0x52	; 82
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	10 82       	st	Z, r1
        while ((TIFR & (1 << OCF0)) == 0);
    1f50:	e8 e5       	ldi	r30, 0x58	; 88
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	82 70       	andi	r24, 0x02	; 2
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	b9 f3       	breq	.-18     	; 0x1f50 <TIMER0_voidDelay_ms+0x2c>
        TIFR |= (1 << OCF0);
    1f62:	a8 e5       	ldi	r26, 0x58	; 88
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e8 e5       	ldi	r30, 0x58	; 88
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	82 60       	ori	r24, 0x02	; 2
    1f6e:	8c 93       	st	X, r24
#define LED_PORT              PORTB_ID


void TIMER0_voidDelay_ms(u32 time_ms) {
    u32 i;
    for (i = 0; i < time_ms; i++) {
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	ab 81       	ldd	r26, Y+3	; 0x03
    1f76:	bc 81       	ldd	r27, Y+4	; 0x04
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	ab 83       	std	Y+3, r26	; 0x03
    1f84:	bc 83       	std	Y+4, r27	; 0x04
    1f86:	29 81       	ldd	r18, Y+1	; 0x01
    1f88:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8a:	4b 81       	ldd	r20, Y+3	; 0x03
    1f8c:	5c 81       	ldd	r21, Y+4	; 0x04
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	af 81       	ldd	r26, Y+7	; 0x07
    1f94:	b8 85       	ldd	r27, Y+8	; 0x08
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	4a 07       	cpc	r20, r26
    1f9c:	5b 07       	cpc	r21, r27
    1f9e:	a8 f2       	brcs	.-86     	; 0x1f4a <TIMER0_voidDelay_ms+0x26>
        TCNT0 = 0;
        while ((TIFR & (1 << OCF0)) == 0);
        TIFR |= (1 << OCF0);
    }
}
    1fa0:	28 96       	adiw	r28, 0x08	; 8
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <main>:

int main(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	28 97       	sbiw	r28, 0x08	; 8
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    u16 adc_value, temperature;

    DIO_voidSetPinDirection(LED_PORT, RED_LED_PIN, PIN_OUTPUT);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(LED_PORT, RED_LED_PIN, PIN_LOW);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
    DIO_voidSetPinDirection(LED_PORT, YELLOW_LED_PIN, PIN_OUTPUT);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(LED_PORT, YELLOW_LED_PIN, PIN_LOW);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
    DIO_voidSetPinDirection(LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	62 e0       	ldi	r22, 0x02	; 2
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(LED_PORT, GREEN_LED_PIN, PIN_LOW);
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
    DIO_voidSetPinDirection(LED_PORT, PIN_4, PIN_OUTPUT);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	64 e0       	ldi	r22, 0x04	; 4
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(LED_PORT, PIN_4, PIN_LOW);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	64 e0       	ldi	r22, 0x04	; 4
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>

    M_TIMER1_voidPwm1Init();
    2016:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <M_TIMER1_voidPwm1Init>
    M_TIMER1_voidPwm1SetTop();
    201a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <M_TIMER1_voidPwm1SetTop>
    M_TIMER1_voidPwm1Start();
    201e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <M_TIMER1_voidPwm1Start>
    u16 data;
    u16 data1;


    LCD_voidInit();
    2022:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_voidInit>
    ADC_voidInit();
    2026:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

    TCCR0 = 0b00001011;
    202a:	e3 e5       	ldi	r30, 0x53	; 83
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8b e0       	ldi	r24, 0x0B	; 11
    2030:	80 83       	st	Z, r24
    OCR0 = 250;
    2032:	ec e5       	ldi	r30, 0x5C	; 92
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8a ef       	ldi	r24, 0xFA	; 250
    2038:	80 83       	st	Z, r24


    LCD_voidWriteString((u8*)"Hello Fatma");
    203a:	80 e6       	ldi	r24, 0x60	; 96
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
    TIMER0_voidDelay_ms(100);
    2042:	64 e6       	ldi	r22, 0x64	; 100
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TIMER0_voidDelay_ms>
    LCD_voidClear();
    204e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_voidClear>

    while (1)
    {
        ADC_voidChannelSellect(CHANNEL_1);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ADC_voidChannelSellect>
        ADC_StartConversionBoling(&data);
    2058:	ce 01       	movw	r24, r28
    205a:	07 96       	adiw	r24, 0x07	; 7
    205c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_StartConversionBoling>
        data1 = (( (u32)(data)*(65-25) ) / (1023) ) + 25;
    2060:	8f 81       	ldd	r24, Y+7	; 0x07
    2062:	98 85       	ldd	r25, Y+8	; 0x08
    2064:	cc 01       	movw	r24, r24
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	28 e2       	ldi	r18, 0x28	; 40
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsi3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	2f ef       	ldi	r18, 0xFF	; 255
    2080:	33 e0       	ldi	r19, 0x03	; 3
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 16 11 	call	0x222c	; 0x222c <__udivmodsi4>
    208e:	da 01       	movw	r26, r20
    2090:	c9 01       	movw	r24, r18
    2092:	49 96       	adiw	r24, 0x19	; 25
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
        M_TIMER1_voidPwm1SetDutyCycle(data1);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <M_TIMER1_voidPwm1SetDutyCycle>
        TIMER0_voidDelay_ms(100);
    20a0:	64 e6       	ldi	r22, 0x64	; 100
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TIMER0_voidDelay_ms>

        ADC_voidChannelSellect(TEMP_SENSOR_CHANNEL);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ADC_voidChannelSellect>
        ADC_StartConversionBoling(&adc_value);
    20b2:	ce 01       	movw	r24, r28
    20b4:	05 96       	adiw	r24, 0x05	; 5
    20b6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_StartConversionBoling>
        temperature = (adc_value * 500UL) / 1023;
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	cc 01       	movw	r24, r24
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	24 ef       	ldi	r18, 0xF4	; 244
    20c6:	31 e0       	ldi	r19, 0x01	; 1
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsi3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	2f ef       	ldi	r18, 0xFF	; 255
    20da:	33 e0       	ldi	r19, 0x03	; 3
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 16 11 	call	0x222c	; 0x222c <__udivmodsi4>
    20e8:	da 01       	movw	r26, r20
    20ea:	c9 01       	movw	r24, r18
    20ec:	9c 83       	std	Y+4, r25	; 0x04
    20ee:	8b 83       	std	Y+3, r24	; 0x03

        LCD_voidGoToXY(0, 0);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidGoToXY>
        LCD_voidWriteString((u8*)"Temp = ");
    20f8:	8c e6       	ldi	r24, 0x6C	; 108
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
        LCD_voidWriteNumber(temperature);
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	cc 01       	movw	r24, r24
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_voidWriteNumber>
        LCD_voidWriteString((u8*)" C");
    2112:	84 e7       	ldi	r24, 0x74	; 116
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
        TIMER0_voidDelay_ms(100);
    211a:	64 e6       	ldi	r22, 0x64	; 100
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TIMER0_voidDelay_ms>

        LCD_voidGoToXY(0, 0x40);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	60 e4       	ldi	r22, 0x40	; 64
    212a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <LCD_voidGoToXY>

        if (temperature >= 60)
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	8c 33       	cpi	r24, 0x3C	; 60
    2134:	91 05       	cpc	r25, r1
    2136:	c8 f0       	brcs	.+50     	; 0x216a <main+0x1b8>
        {
            DIO_voidSetPinValue(LED_PORT, RED_LED_PIN, PIN_HIGH);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, GREEN_LED_PIN, PIN_LOW);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	62 e0       	ldi	r22, 0x02	; 2
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, YELLOW_LED_PIN, PIN_LOW);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, PIN_4, PIN_HIGH);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            LCD_voidWriteString((u8*)"High Temp!   ");
    2160:	87 e7       	ldi	r24, 0x77	; 119
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
    2168:	3b c0       	rjmp	.+118    	; 0x21e0 <main+0x22e>
        }
        else if (temperature >= 40 && temperature < 60)
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	88 32       	cpi	r24, 0x28	; 40
    2170:	91 05       	cpc	r25, r1
    2172:	f0 f0       	brcs	.+60     	; 0x21b0 <main+0x1fe>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	8c 33       	cpi	r24, 0x3C	; 60
    217a:	91 05       	cpc	r25, r1
    217c:	c8 f4       	brcc	.+50     	; 0x21b0 <main+0x1fe>
        {
            DIO_voidSetPinValue(LED_PORT, YELLOW_LED_PIN, PIN_HIGH);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, GREEN_LED_PIN, PIN_LOW);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	62 e0       	ldi	r22, 0x02	; 2
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, RED_LED_PIN, PIN_LOW);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, PIN_4, PIN_LOW);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            LCD_voidWriteString((u8*)"Medium Temp!   ");
    21a6:	85 e8       	ldi	r24, 0x85	; 133
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
    21ae:	18 c0       	rjmp	.+48     	; 0x21e0 <main+0x22e>
        }
        else
        {
            DIO_voidSetPinValue(LED_PORT, GREEN_LED_PIN, PIN_HIGH);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, YELLOW_LED_PIN, PIN_LOW);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, RED_LED_PIN, PIN_LOW);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(LED_PORT, PIN_4, PIN_LOW);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	64 e0       	ldi	r22, 0x04	; 4
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <DIO_voidSetPinValue>
            LCD_voidWriteString((u8*)"Low Temp!   ");
    21d8:	85 e9       	ldi	r24, 0x95	; 149
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <LCD_voidWriteString>
        }

        TIMER0_voidDelay_ms(20);
    21e0:	64 e1       	ldi	r22, 0x14	; 20
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <TIMER0_voidDelay_ms>
    21ec:	32 cf       	rjmp	.-412    	; 0x2052 <main+0xa0>

000021ee <__mulsi3>:
    21ee:	62 9f       	mul	r22, r18
    21f0:	d0 01       	movw	r26, r0
    21f2:	73 9f       	mul	r23, r19
    21f4:	f0 01       	movw	r30, r0
    21f6:	82 9f       	mul	r24, r18
    21f8:	e0 0d       	add	r30, r0
    21fa:	f1 1d       	adc	r31, r1
    21fc:	64 9f       	mul	r22, r20
    21fe:	e0 0d       	add	r30, r0
    2200:	f1 1d       	adc	r31, r1
    2202:	92 9f       	mul	r25, r18
    2204:	f0 0d       	add	r31, r0
    2206:	83 9f       	mul	r24, r19
    2208:	f0 0d       	add	r31, r0
    220a:	74 9f       	mul	r23, r20
    220c:	f0 0d       	add	r31, r0
    220e:	65 9f       	mul	r22, r21
    2210:	f0 0d       	add	r31, r0
    2212:	99 27       	eor	r25, r25
    2214:	72 9f       	mul	r23, r18
    2216:	b0 0d       	add	r27, r0
    2218:	e1 1d       	adc	r30, r1
    221a:	f9 1f       	adc	r31, r25
    221c:	63 9f       	mul	r22, r19
    221e:	b0 0d       	add	r27, r0
    2220:	e1 1d       	adc	r30, r1
    2222:	f9 1f       	adc	r31, r25
    2224:	bd 01       	movw	r22, r26
    2226:	cf 01       	movw	r24, r30
    2228:	11 24       	eor	r1, r1
    222a:	08 95       	ret

0000222c <__udivmodsi4>:
    222c:	a1 e2       	ldi	r26, 0x21	; 33
    222e:	1a 2e       	mov	r1, r26
    2230:	aa 1b       	sub	r26, r26
    2232:	bb 1b       	sub	r27, r27
    2234:	fd 01       	movw	r30, r26
    2236:	0d c0       	rjmp	.+26     	; 0x2252 <__udivmodsi4_ep>

00002238 <__udivmodsi4_loop>:
    2238:	aa 1f       	adc	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	ee 1f       	adc	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	a2 17       	cp	r26, r18
    2242:	b3 07       	cpc	r27, r19
    2244:	e4 07       	cpc	r30, r20
    2246:	f5 07       	cpc	r31, r21
    2248:	20 f0       	brcs	.+8      	; 0x2252 <__udivmodsi4_ep>
    224a:	a2 1b       	sub	r26, r18
    224c:	b3 0b       	sbc	r27, r19
    224e:	e4 0b       	sbc	r30, r20
    2250:	f5 0b       	sbc	r31, r21

00002252 <__udivmodsi4_ep>:
    2252:	66 1f       	adc	r22, r22
    2254:	77 1f       	adc	r23, r23
    2256:	88 1f       	adc	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	1a 94       	dec	r1
    225c:	69 f7       	brne	.-38     	; 0x2238 <__udivmodsi4_loop>
    225e:	60 95       	com	r22
    2260:	70 95       	com	r23
    2262:	80 95       	com	r24
    2264:	90 95       	com	r25
    2266:	9b 01       	movw	r18, r22
    2268:	ac 01       	movw	r20, r24
    226a:	bd 01       	movw	r22, r26
    226c:	cf 01       	movw	r24, r30
    226e:	08 95       	ret

00002270 <__prologue_saves__>:
    2270:	2f 92       	push	r2
    2272:	3f 92       	push	r3
    2274:	4f 92       	push	r4
    2276:	5f 92       	push	r5
    2278:	6f 92       	push	r6
    227a:	7f 92       	push	r7
    227c:	8f 92       	push	r8
    227e:	9f 92       	push	r9
    2280:	af 92       	push	r10
    2282:	bf 92       	push	r11
    2284:	cf 92       	push	r12
    2286:	df 92       	push	r13
    2288:	ef 92       	push	r14
    228a:	ff 92       	push	r15
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	ca 1b       	sub	r28, r26
    229a:	db 0b       	sbc	r29, r27
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	09 94       	ijmp

000022a8 <__epilogue_restores__>:
    22a8:	2a 88       	ldd	r2, Y+18	; 0x12
    22aa:	39 88       	ldd	r3, Y+17	; 0x11
    22ac:	48 88       	ldd	r4, Y+16	; 0x10
    22ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    22b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ba:	b9 84       	ldd	r11, Y+9	; 0x09
    22bc:	c8 84       	ldd	r12, Y+8	; 0x08
    22be:	df 80       	ldd	r13, Y+7	; 0x07
    22c0:	ee 80       	ldd	r14, Y+6	; 0x06
    22c2:	fd 80       	ldd	r15, Y+5	; 0x05
    22c4:	0c 81       	ldd	r16, Y+4	; 0x04
    22c6:	1b 81       	ldd	r17, Y+3	; 0x03
    22c8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ca:	b9 81       	ldd	r27, Y+1	; 0x01
    22cc:	ce 0f       	add	r28, r30
    22ce:	d1 1d       	adc	r29, r1
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	ed 01       	movw	r28, r26
    22dc:	08 95       	ret

000022de <_exit>:
    22de:	f8 94       	cli

000022e0 <__stop_program>:
    22e0:	ff cf       	rjmp	.-2      	; 0x22e0 <__stop_program>
